// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  name                String?
  password            String?
  image               String?
  emailVerified       DateTime?
  lastLoginAt         DateTime?
  loginCount          Int      @default(0)
  acquisitionChannel  String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  analytics   Analytics[]
  products    Product[]
  visuals     Visual[]
  accounts    Account[]
  sessions    Session[]
  projects    Project[]
  collections Collection[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  action    String
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  imageUrl    String?
  category    String?
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Visual {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  prompt    String
  imageUrl  String?
  videoUrl  String?
  type      String   // 'image' or 'video'
  status    String   @default("pending") // 'pending', 'completed', 'failed'
  metadata  String?  // JSON string for additional data
  tags      String?  // Comma-separated tags
  aiTags    String?  // AI-generated tags (comma-separated)
  aiDescription String? // AI-generated description for search
  embedding String?  // Vector embedding for similarity search (JSON array)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  project            Project?            @relation(fields: [projectId], references: [id], onDelete: SetNull)
  collectionVisuals  CollectionVisual[]
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  thumbnail   String?  // URL to a representative image
  color       String?  // Hex color for project theming
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  visuals     Visual[]
  collections Collection[]
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  projectId   String   // Collections now belong to projects
  name        String
  description String?
  thumbnail   String?  // URL to a representative image
  color       String?  // Hex color for collection theming
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  collectionVisuals CollectionVisual[]
}

model CollectionVisual {
  id           String @id @default(cuid())
  collectionId String
  visualId     String
  order        Int    @default(0)
  addedAt      DateTime @default(now())

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  visual     Visual     @relation(fields: [visualId], references: [id], onDelete: Cascade)

  @@unique([collectionId, visualId])
}